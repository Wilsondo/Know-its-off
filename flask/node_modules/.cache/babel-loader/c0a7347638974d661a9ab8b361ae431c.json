{"ast":null,"code":"import firebase from'firebase/app';import'firebase/messaging';var firebaseConfig={apiKey:\"AIzaSyCGG2bVOzc9jR_dPhNlTxEn_ZTajkcHVzo\",authDomain:\"know-its-off-jsyg.firebaseapp.com\",projectId:\"know-its-off-jsyg\",storageBucket:\"know-its-off-jsyg.appspot.com\",messagingSenderId:\"1039398438265\",appId:\"1:1039398438265:web:f0e1ae04a1db6c68025ba8\"};firebase.initializeApp(firebaseConfig);var messaging=firebase.messaging();export var getToken=function getToken(setTokenFound){return messaging.getToken({vapidKey:'BHqTAUfRBDJlK88PZlXUl92tdXi_YmKp7HaR0RMHQBp0cXZ9bKxW3m53TN9KAf6WhuuO6ZkhYObb9fNOae85ZAc'}).then(function(currentToken){if(currentToken){console.log('current token for client: ',currentToken);setTokenFound(true);// Track the token -> client mapping, by sending to backend server\n// show on the UI that permission is secured\n}else{console.log('No registration token available. Request permission to generate one.');setTokenFound(false);// shows on the UI that permission is required \n}}).catch(function(err){console.log('An error occurred while retrieving token. ',err);// catch error while creating client token\n});};export var onMessageListener=function onMessageListener(){return new Promise(function(resolve){messaging.onMessage(function(payload){resolve(payload);});});};","map":{"version":3,"sources":["/mnt/e/MyReact/new_frontend/src/components/firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","initializeApp","messaging","getToken","setTokenFound","vapidKey","then","currentToken","console","log","catch","err","onMessageListener","Promise","resolve","onMessage","payload"],"mappings":"AAAA,MAAOA,CAAAA,QAAP,KAAqB,cAArB,CACA,MAAO,oBAAP,CAEA,GAAIC,CAAAA,cAAc,CAAG,CACjBC,MAAM,CAAE,yCADS,CAEjBC,UAAU,CAAE,mCAFK,CAGjBC,SAAS,CAAE,mBAHM,CAIjBC,aAAa,CAAE,+BAJE,CAKjBC,iBAAiB,CAAE,eALF,CAMjBC,KAAK,CAAE,4CANU,CAArB,CASAP,QAAQ,CAACQ,aAAT,CAAuBP,cAAvB,EAEA,GAAMQ,CAAAA,SAAS,CAAGT,QAAQ,CAACS,SAAT,EAAlB,CAEA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,aAAD,CAAmB,CACvC,MAAOF,CAAAA,SAAS,CAACC,QAAV,CAAmB,CAACE,QAAQ,CAAE,yFAAX,CAAnB,EAA0HC,IAA1H,CAA+H,SAACC,YAAD,CAAkB,CACtJ,GAAIA,YAAJ,CAAkB,CAChBC,OAAO,CAACC,GAAR,CAAY,4BAAZ,CAA0CF,YAA1C,EACAH,aAAa,CAAC,IAAD,CAAb,CACA;AACA;AACD,CALD,IAKO,CACLI,OAAO,CAACC,GAAR,CAAY,sEAAZ,EACAL,aAAa,CAAC,KAAD,CAAb,CACA;AACD,CACF,CAXM,EAWJM,KAXI,CAWE,SAACC,GAAD,CAAS,CAChBH,OAAO,CAACC,GAAR,CAAY,4CAAZ,CAA0DE,GAA1D,EACA;AACD,CAdM,CAAP,CAeD,CAhBI,CAkBP,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,SAC/B,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAa,CACvBZ,SAAS,CAACa,SAAV,CAAoB,SAACC,OAAD,CAAa,CAC/BF,OAAO,CAACE,OAAD,CAAP,CACD,CAFD,EAGH,CAJC,CAD+B,EAA1B","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/messaging';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCGG2bVOzc9jR_dPhNlTxEn_ZTajkcHVzo\",\r\n    authDomain: \"know-its-off-jsyg.firebaseapp.com\",\r\n    projectId: \"know-its-off-jsyg\",\r\n    storageBucket: \"know-its-off-jsyg.appspot.com\",\r\n    messagingSenderId: \"1039398438265\",\r\n    appId: \"1:1039398438265:web:f0e1ae04a1db6c68025ba8\"\r\n  };\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst messaging = firebase.messaging();\r\n\r\nexport const getToken = (setTokenFound) => {\r\n    return messaging.getToken({vapidKey: 'BHqTAUfRBDJlK88PZlXUl92tdXi_YmKp7HaR0RMHQBp0cXZ9bKxW3m53TN9KAf6WhuuO6ZkhYObb9fNOae85ZAc'}).then((currentToken) => {\r\n      if (currentToken) {\r\n        console.log('current token for client: ', currentToken);\r\n        setTokenFound(true);\r\n        // Track the token -> client mapping, by sending to backend server\r\n        // show on the UI that permission is secured\r\n      } else {\r\n        console.log('No registration token available. Request permission to generate one.');\r\n        setTokenFound(false);\r\n        // shows on the UI that permission is required \r\n      }\r\n    }).catch((err) => {\r\n      console.log('An error occurred while retrieving token. ', err);\r\n      // catch error while creating client token\r\n    });\r\n  }\r\n\r\nexport const onMessageListener = () =>\r\n  new Promise((resolve) => {\r\n    messaging.onMessage((payload) => {\r\n      resolve(payload);\r\n    });\r\n});"]},"metadata":{},"sourceType":"module"}