{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/e/MyReact/new_frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\nimport MyNavbar from './components/navbar';\nimport Default from './components/default';\nimport Login from './components/login';\nimport Signup from './components/signup';\nimport Logout from './components/logout';\nimport Home from './components/home';\nimport EditUser from './components/editUser'; //import \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport addDevice from './components/addDevice';\nimport editDevice from './components/editDevice';\nimport Device from './components/device';\n\nconst NavRoute = ({\n  exact,\n  path,\n  component: Component\n}) => /*#__PURE__*/_jsxDEV(Route, {\n  exact: exact,\n  path: path,\n  render: props => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MyNavbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Component, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 17,\n  columnNumber: 3\n}, this);\n\n_c = NavRoute;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // Boolean attribute that will allow us to toggle the switch\n      // Keep the switch on if the theme is dark\n      checked: localStorage.getItem(\"theme\") === \"dark\" ? true : false,\n\n      /**\n       * When a user activates the dark theme we will store the value\n       * on localstorage or set default value to light if it is neither dark\n       * nor light\n       */\n      theme: localStorage.getItem(\"theme\")\n    };\n\n    this.toggleThemeChange = () => {\n      const {\n        checked\n      } = this.state; // If theme is light then change to dark\n\n      if (checked === false) {\n        // Update localstorage\n        localStorage.setItem(\"theme\", \"dark\");\n        /**\n         * The document.getElementsByTagName(...).setAttribute(...)\n         * will only update the value\n         */\n        // Update the data-theme attribute of our html tag\n\n        document.getElementsByTagName(\"HTML\")[0].setAttribute(\"data-theme\", localStorage.getItem(\"theme\")); // Update our state\n\n        this.setState({\n          // Ensure our switch is on if we change to dark theme\n          checked: true\n        });\n      } else {\n        // Update localstorage\n        localStorage.setItem(\"theme\", \"light\");\n        /**\n         * The document.getElementsByTagName(...).setAttribute(...)\n         * will only update the value until the App is mounted and we change\n         * the state of the switch so we will need to introduce\n         * a React lifecycle called ˝componentDidMount()˝\n         */\n        // Update the data-theme attribute of our html tag\n\n        document.getElementsByTagName(\"HTML\")[0].setAttribute(\"data-theme\", localStorage.getItem(\"theme\")); // Update our state\n\n        this.setState({\n          // Ensure our switch is off if we change to light theme\n          checked: false\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    // Update the data-theme attribute of our html tag\n    document.getElementsByTagName(\"HTML\")[0].setAttribute(\"data-theme\", localStorage.getItem(\"theme\"));\n  } // Class method allowing us to toggle the theme change\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"App-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: logo,\n            className: \"App-logo\",\n            alt: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Click the switch to toggle themes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            class: \"switch\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\" // checked={this.state.checked}\n              ,\n              defaultChecked: this.state.checked,\n              onChange: () => this.toggleThemeChange()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              class: \"slider round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Router, {\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/\",\n            component: Login\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/login\",\n            component: Login\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/logout\",\n            component: Logout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/signup\",\n            component: Signup\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NavRoute, {\n            exact: true,\n            path: \"/home\",\n            component: Home\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NavRoute, {\n            exact: true,\n            path: \"/device/new\",\n            component: addDevice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NavRoute, {\n            exact: true,\n            path: \"/device/:handle\",\n            component: Device\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NavRoute, {\n            exact: true,\n            path: \"/device/:handle/edit\",\n            component: editDevice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NavRoute, {\n            exact: true,\n            path: \"/user/edit\",\n            component: EditUser\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NavRoute, {\n            component: Default\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavRoute\");","map":{"version":3,"sources":["/mnt/e/MyReact/new_frontend/src/App.js"],"names":["React","Component","Switch","Route","BrowserRouter","Router","MyNavbar","Default","Login","Signup","Logout","Home","EditUser","addDevice","editDevice","Device","NavRoute","exact","path","component","props","App","state","checked","localStorage","getItem","theme","toggleThemeChange","setItem","document","getElementsByTagName","setAttribute","setState","componentDidMount","render","logo"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Switch, Route, BrowserRouter as Router} from 'react-router-dom';\nimport './App.css';\nimport MyNavbar from './components/navbar';\nimport Default from './components/default';\nimport Login from './components/login';\nimport Signup from './components/signup';\nimport Logout from './components/logout'\nimport Home from './components/home';\nimport EditUser from './components/editUser';\n//import \"bootstrap/dist/css/bootstrap.min.css\";\nimport addDevice from './components/addDevice';\nimport editDevice from './components/editDevice';\nimport Device from './components/device';\n\nconst NavRoute = ({exact, path, component: Component}) => (\n  <Route exact={exact} path={path} render={(props) => (\n    <div>\n      <MyNavbar />\n      <Component {...props}/>\n    </div>\n  )}/>\n)\nclass App extends Component {\n  state = {\n    // Boolean attribute that will allow us to toggle the switch\n    // Keep the switch on if the theme is dark\n    checked: localStorage.getItem(\"theme\") === \"dark\" ? true : false,\n    /**\n     * When a user activates the dark theme we will store the value\n     * on localstorage or set default value to light if it is neither dark\n     * nor light\n     */\n    theme: localStorage.getItem(\"theme\")\n  };\n\n  componentDidMount() {\n    // Update the data-theme attribute of our html tag\n    document\n      .getElementsByTagName(\"HTML\")[0]\n      .setAttribute(\"data-theme\", localStorage.getItem(\"theme\"));\n  }\n\n  // Class method allowing us to toggle the theme change\n  toggleThemeChange = () => {\n    const { checked } = this.state;\n    // If theme is light then change to dark\n    if (checked === false) {\n      // Update localstorage\n      localStorage.setItem(\"theme\", \"dark\");\n      /**\n       * The document.getElementsByTagName(...).setAttribute(...)\n       * will only update the value\n       */\n      // Update the data-theme attribute of our html tag\n      document\n        .getElementsByTagName(\"HTML\")[0]\n        .setAttribute(\"data-theme\", localStorage.getItem(\"theme\"));\n      // Update our state\n      this.setState({\n        // Ensure our switch is on if we change to dark theme\n        checked: true\n      });\n    } else {\n      // Update localstorage\n      localStorage.setItem(\"theme\", \"light\");\n      /**\n       * The document.getElementsByTagName(...).setAttribute(...)\n       * will only update the value until the App is mounted and we change\n       * the state of the switch so we will need to introduce\n       * a React lifecycle called ˝componentDidMount()˝\n       */\n      // Update the data-theme attribute of our html tag\n      document\n        .getElementsByTagName(\"HTML\")[0]\n        .setAttribute(\"data-theme\", localStorage.getItem(\"theme\"));\n      // Update our state\n      this.setState({\n        // Ensure our switch is off if we change to light theme\n        checked: false\n      });\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>Click the switch to toggle themes</p>\n            <label class=\"switch\">\n              {/* checked attribute is used to determine the state of \n            checkbox\n            ----------------------------------------------\n            The onChange attribute will toggle our theme change\n              */}\n              <input\n                type=\"checkbox\"\n                // checked={this.state.checked}\n                defaultChecked={this.state.checked}\n                onChange={() => this.toggleThemeChange()}\n              />\n          <span class=\"slider round\" />\n        </label>\n      </header>\n    </div>\n        <Router>\n          <Switch>\n          <Route exact path=\"/\" component={Login} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/logout\" component={Logout} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <NavRoute exact path=\"/home\" component={Home} />\n            <NavRoute exact path=\"/device/new\" component={addDevice} />\n            <NavRoute exact path=\"/device/:handle\" component={Device} />\n            <NavRoute exact path=\"/device/:handle/edit\" component={editDevice} />\n            <NavRoute exact path=\"/user/edit\" component={EditUser} />\n          <NavRoute component={Default} />\n          </Switch>\n        </Router>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}