{"ast":null,"code":"var _jsxFileName = \"/mnt/e/MyReact/new_frontend/src/components/grid/GridContext.js\";\nimport React, { Component, createContext } from \"react\";\nimport Cookies from 'js-cookie'; //import { GridContextProvider } from \"react-grid-dnd\";\n// Helper functions\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction move(array, oldIndex, newIndex) {\n  if (newIndex >= array.length) {\n    newIndex = array.length - 1;\n  }\n\n  array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  return array;\n}\n\nfunction moveElement(array, index, offset) {\n  const newIndex = index + offset;\n  return move(array, index, newIndex);\n}\n/*function findIndexofItems(i, items_copy, cookie_items) {\n  return items_copy.findIndex(item => item.id === cookie_items[i].id) \n}*/\n// Context\n\n\nconst GridContext = /*#__PURE__*/createContext({\n  items: []\n});\nexport class GridProvider extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setItems = items => {\n      if (!Cookies.get('idList') && items) {\n        this.setState({\n          items\n        });\n      } else {\n        var i, j;\n        var items_copy = items.slice(); //retreive cookie\n\n        var cookie_idList = JSON.parse(Cookies.get('idList'));\n        var myArr = []; //reorder items based on cookie_idList\n\n        for (i in cookie_idList) {\n          for (j in items_copy) {\n            const itemID = items_copy[j].id;\n            const cookieID = cookie_idList[i];\n\n            if (itemID === cookieID) {\n              myArr.push(items_copy[j]);\n              items_copy.splice(j, 1);\n            }\n          }\n        }\n      }\n\n      for (i in items_copy) {\n        myArr.push(items_copy[i]);\n      }\n\n      if (myArr) {\n        this.setState({\n          items: myArr\n        });\n      }\n    };\n\n    this.moveItem = (sourceId, destinationId) => {\n      const sourceIndex = this.state.items.findIndex(item => item.id === sourceId);\n      const destinationIndex = this.state.items.findIndex(item => item.id === destinationId); // If source/destination is unknown, do nothing.\n\n      if (sourceId === -1 || destinationId === -1) {\n        return;\n      }\n\n      const offset = destinationIndex - sourceIndex;\n      this.setState(state => ({\n        items: moveElement(state.items, sourceIndex, offset)\n      })); //store items in cookie\n\n      var i;\n      var idList = [];\n\n      for (i in this.state.items) {\n        idList.push(this.state.items[i].id);\n      }\n\n      Cookies.set('idList', idList);\n    };\n\n    this.state = {\n      items: [],\n      moveItem: this.moveItem,\n      setItems: this.setItems\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(GridContext.Provider, {\n      value: this.state,\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nexport default GridContext;","map":{"version":3,"sources":["/mnt/e/MyReact/new_frontend/src/components/grid/GridContext.js"],"names":["React","Component","createContext","Cookies","move","array","oldIndex","newIndex","length","splice","moveElement","index","offset","GridContext","items","GridProvider","constructor","props","setItems","get","setState","i","j","items_copy","slice","cookie_idList","JSON","parse","myArr","itemID","id","cookieID","push","moveItem","sourceId","destinationId","sourceIndex","state","findIndex","item","destinationIndex","idList","set","render","children"],"mappings":"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","sourcesContent":["import React, { Component, createContext } from \"react\";\nimport Cookies from 'js-cookie';\n\n//import { GridContextProvider } from \"react-grid-dnd\";\n\n// Helper functions\n\nfunction move(array, oldIndex, newIndex) {\n  if (newIndex >= array.length) {\n    newIndex = array.length - 1;\n  }\n  array.splice(newIndex, 0, array.splice(oldIndex, 1)[0]);\n  return array;\n}\n\nfunction moveElement(array, index, offset) {\n  const newIndex = index + offset;\n\n  return move(array, index, newIndex);\n}\n\n/*function findIndexofItems(i, items_copy, cookie_items) {\n  return items_copy.findIndex(item => item.id === cookie_items[i].id) \n}*/\n\n// Context\n\nconst GridContext = createContext({ items: [] });\n\nexport class GridProvider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      moveItem: this.moveItem,\n      setItems: this.setItems\n    };\n  }\n\n  render() {\n    return (\n      <GridContext.Provider value={this.state}>\n        {this.props.children}\n      </GridContext.Provider>\n    );\n  }\n\n  setItems = items => {\n    if(!Cookies.get('idList') && items){\n      this.setState({items})\n    }\n    else{\n      var i, j\n      var items_copy = items.slice()\n      //retreive cookie\n      var cookie_idList = JSON.parse(Cookies.get('idList'));\n      var myArr = []\n      //reorder items based on cookie_idList\n      for(i in cookie_idList){\n         for(j in items_copy){\n            const itemID = items_copy[j].id\n            const cookieID = cookie_idList[i]\n            if(itemID === cookieID){\n               myArr.push(items_copy[j])\n               items_copy.splice(j,1)\n            }\n          }\n        }\n      }\n      for(i in items_copy){myArr.push(items_copy[i])}\n      if(myArr){\n         this.setState({items: myArr})\n      }\n  };\n\n  moveItem = (sourceId, destinationId) => {\n    const sourceIndex = this.state.items.findIndex(\n      item => item.id === sourceId\n    );\n    const destinationIndex = this.state.items.findIndex(\n      item => item.id === destinationId\n    );\n\n    // If source/destination is unknown, do nothing.\n    if (sourceId === -1 || destinationId === -1) {\n      return;\n    }\n\n    const offset = destinationIndex - sourceIndex;\n\n    this.setState(state => ({\n      items: moveElement(state.items, sourceIndex, offset)\n    }));\n\n    //store items in cookie\n    var i\n    var idList = []\n    for(i in this.state.items){\n       idList.push(this.state.items[i].id)\n    }\n    Cookies.set('idList', idList)\n  };\n}\n\nexport default GridContext;\n"]},"metadata":{},"sourceType":"module"}