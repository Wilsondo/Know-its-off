{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/e/MyReact/new_frontend/src/components/addDevice.js\";\nimport React, { Component } from 'react';\nimport { CircleSpinner } from 'react-spinners-kit';\nimport axiosBaseURL from '../axios.js';\nexport default class addDevice extends Component {\n  constructor(props) {\n    super(props);\n\n    this.postData = event => {\n      this.setState({\n        postLoading: true\n      }); //if creating a new appliance post it first\n\n      if (this.state.myDevice.device_id === 0) {\n        axiosBaseURL.post('/devices', this.state.myDevice).then(result => {\n          console.log(result);\n          this.setState({\n            myDevice: { ...this.state.myDevice,\n              device_id: result.data.id\n            }\n          });\n        }).catch(error => {\n          this.setState({\n            postLoading: false,\n            error: true\n          });\n        });\n      }\n\n      event.preventDefault();\n    };\n\n    this.handleChangeDevice = event => {\n      this.setState({\n        myDevice: { ...this.state.myDevice,\n          [event.target.appliance_name]: event.target.value\n        }\n      });\n    };\n\n    this.state = {\n      myDevice: {\n        appliance_name: \"My Appliance\",\n        device_state: \"1\",\n        device_battery: \"100.0\",\n        timestamp: \"2019-04-30T08:59:00.000Z\"\n      },\n      userDevices: [],\n      applianceNames: [],\n      disabled: false,\n      loading: true,\n      error: false,\n      postLoading: false,\n      redirect: null\n    };\n  } //Get users appliances, add the names to the select form element\n\n\n  componentDidMount() {\n    axiosBaseURL.get(\"/devices\").then(result => {\n      this.setState({\n        loading: false,\n        usersDevices: result.data\n      });\n      var myList = [];\n      var i;\n\n      for (i in this.state.usersDevices) {\n        myList.push([this.state.usersDevices[i].appliance_name, this.state.usersDevices[i].id]);\n      }\n\n      this.setState({\n        applianceNames: myList\n      });\n    }).catch(error => {\n      this.setState({\n        loading: false,\n        error: true\n      });\n\n      if (error.response) {\n        this.setState({\n          error_response: error.response.data\n        });\n\n        if (error.response.data === \"not authorized\") {\n          this.setState({\n            redirect: \"/\"\n          });\n        } else if (error.response.data) {\n          console.log(error.response.data);\n        }\n      }\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"m-5\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"There was an error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 38\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (this.state.loading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-center m-5\",\n        children: /*#__PURE__*/_jsxDEV(CircleSpinner, {\n          size: 60,\n          color: \"#686769\",\n          loading: this.state.loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this);\n    }\n\n    let options = this.state.applianceNames.map(data => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: data[1],\n      children: data[0]\n    }, data[1], false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 10\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"m-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"New Device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Appliance Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"form-control\",\n            appliance_name: \"appliance_name\",\n            id: \"inputScoutName\",\n            \"aria-describedby\": \"nameHelp\",\n            onChange: this.handleChangeDevice,\n            value: this.state.myDevice.appliance_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.postData,\n          className: \"btn btn-success\",\n          children: [\"Add this device\", /*#__PURE__*/_jsxDEV(CircleSpinner, {\n            size: 20,\n            color: \"#3BBCE5\",\n            loading: this.state.postLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 79\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 1\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/mnt/e/MyReact/new_frontend/src/components/addDevice.js"],"names":["React","Component","CircleSpinner","axiosBaseURL","addDevice","constructor","props","postData","event","setState","postLoading","state","myDevice","device_id","post","then","result","console","log","data","id","catch","error","preventDefault","handleChangeDevice","target","appliance_name","value","device_state","device_battery","timestamp","userDevices","applianceNames","disabled","loading","redirect","componentDidMount","get","usersDevices","myList","i","push","response","error_response","render","options","map"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport {CircleSpinner} from 'react-spinners-kit' \nimport axiosBaseURL from '../axios.js'\n\n\nexport default class addDevice extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      myDevice: {\n\t\t   appliance_name: \"My Appliance\",\n         device_state: \"1\", \n         device_battery: \"100.0\",\n         timestamp: \"2019-04-30T08:59:00.000Z\",\n\t   },\n      userDevices: [],\n      applianceNames: [],\n      disabled: false,\n\t   loading: true,\n\t   error: false,\n\t   postLoading: false,\n      redirect: null\n    };\n  }\n\n   //Get users appliances, add the names to the select form element\n   componentDidMount() {\n      axiosBaseURL.get(\"/devices\")\n      .then((result) => {\n         this.setState({\n            loading: false,\n            usersDevices: result.data\n         });\n         var myList = [];\n         var i;\n         for(i in this.state.usersDevices) {\n            myList.push([this.state.usersDevices[i].appliance_name, this.state.usersDevices[i].id])\n         }\n         this.setState({applianceNames: myList})\n      })\n      .catch( (error) => {\n         this.setState({loading: false, error: true});\n         if(error.response){\n            this.setState({error_response: error.response.data});\n            if(error.response.data === \"not authorized\"){ this.setState({redirect: \"/\"}) }\n            else if (error.response.data){console.log(error.response.data)}\n         }\n      })\n   }\n\n   postData = (event) => {\n      this.setState({postLoading:true});\n      //if creating a new appliance post it first\n      if(this.state.myDevice.device_id === 0){\n         axiosBaseURL.post('/devices', this.state.myDevice)\n         .then((result) => {\n            console.log(result)\n            this.setState({ myDevice: {...this.state.myDevice, device_id: result.data.id} })\n         })\n         .catch((error) => {this.setState({postLoading:false, error:true})})\n      }\n\t   event.preventDefault();\n   };\n\n   handleChangeDevice = (event) => {\n      this.setState({\n         myDevice : {...this.state.myDevice, [event.target.appliance_name]: event.target.value}\n      });\n   };\n\n\trender(){\n\t\tif(this.state.error){ \n         return(<div className=\"m-5\"><h3>There was an error</h3></div>) \n      }\n\t\tif(this.state.loading){\n         return (\n            <div className=\"d-flex justify-content-center m-5\">\n               <CircleSpinner size={60} color=\"#686769\" loading={this.state.loading} />\n            </div>)\n\t\t}\n      let options = this.state.applianceNames.map((data) =>\n         <option key={data[1]} value={data[1]}>{data[0]}</option>\n      );\n\t\treturn(\n<div className=\"m-5\">\n<h3>New Device</h3>\n<form>\n   <div className=\"form-group\">\n      <label>Appliance Name</label>\n      <input className=\"form-control\" appliance_name=\"appliance_name\" id=\"inputScoutName\" aria-describedby=\"nameHelp\" onChange={this.handleChangeDevice} value={this.state.myDevice.appliance_name} />\n   </div>\n\n   <button onClick={this.postData} className=\"btn btn-success\">Add this device<CircleSpinner size={20} color=\"#3BBCE5\" loading={this.state.postLoading} /></button>\n</form>\n</div>\n\t\t)\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}