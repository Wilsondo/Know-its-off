{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { memo, useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nconst DragItem = /*#__PURE__*/memo(_c = _s(({\n  id,\n  onMoveItem,\n  children\n}) => {\n  _s();\n\n  const ref = useRef(null);\n  const [{\n    isDragging\n  }, connectDrag] = useDrag({\n    item: {\n      id,\n      type: \"IMG\"\n    },\n    collect: monitor => {\n      return {\n        isDragging: monitor.isDragging()\n      };\n    }\n  });\n  const [, connectDrop] = useDrop({\n    accept: \"IMG\",\n\n    hover(hoveredOverItem) {\n      if (hoveredOverItem.id !== id) {\n        onMoveItem(hoveredOverItem.id, id);\n      }\n    }\n\n  });\n  connectDrag(ref);\n  connectDrop(ref);\n  const opacity = isDragging ? 0.5 : 1;\n  const containerStyle = {\n    opacity\n  };\n  return React.Children.map(children, child => /*#__PURE__*/React.cloneElement(child, {\n    forwardedRef: ref,\n    style: containerStyle\n  }));\n}, \"C4xkxD4mjMjhMXp9Xi+5lKABukY=\", false, function () {\n  return [useDrag, useDrop];\n}));\n_c2 = DragItem;\nexport default DragItem;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DragItem$memo\");\n$RefreshReg$(_c2, \"DragItem\");","map":{"version":3,"sources":["/mnt/e/MyReact/new_frontend/src/components/grid/DragItem.js"],"names":["React","memo","useRef","useDrag","useDrop","DragItem","id","onMoveItem","children","ref","isDragging","connectDrag","item","type","collect","monitor","connectDrop","accept","hover","hoveredOverItem","opacity","containerStyle","Children","map","child","cloneElement","forwardedRef","style"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,MAAtB,QAAoC,OAApC;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,WAAjC;AAEA,MAAMC,QAAQ,gBAAGJ,IAAI,SAAC,CAAC;AAAEK,EAAAA,EAAF;AAAMC,EAAAA,UAAN;AAAkBC,EAAAA;AAAlB,CAAD,KAAkC;AAAA;;AACtD,QAAMC,GAAG,GAAGP,MAAM,CAAC,IAAD,CAAlB;AAEA,QAAM,CAAC;AAAEQ,IAAAA;AAAF,GAAD,EAAiBC,WAAjB,IAAgCR,OAAO,CAAC;AAC5CS,IAAAA,IAAI,EAAE;AAAEN,MAAAA,EAAF;AAAMO,MAAAA,IAAI,EAAE;AAAZ,KADsC;AAE5CC,IAAAA,OAAO,EAAEC,OAAO,IAAI;AAClB,aAAO;AACLL,QAAAA,UAAU,EAAEK,OAAO,CAACL,UAAR;AADP,OAAP;AAGD;AAN2C,GAAD,CAA7C;AASA,QAAM,GAAGM,WAAH,IAAkBZ,OAAO,CAAC;AAC9Ba,IAAAA,MAAM,EAAE,KADsB;;AAE9BC,IAAAA,KAAK,CAACC,eAAD,EAAkB;AACrB,UAAIA,eAAe,CAACb,EAAhB,KAAuBA,EAA3B,EAA+B;AAC7BC,QAAAA,UAAU,CAACY,eAAe,CAACb,EAAjB,EAAqBA,EAArB,CAAV;AACD;AACF;;AAN6B,GAAD,CAA/B;AASAK,EAAAA,WAAW,CAACF,GAAD,CAAX;AACAO,EAAAA,WAAW,CAACP,GAAD,CAAX;AAEA,QAAMW,OAAO,GAAGV,UAAU,GAAG,GAAH,GAAS,CAAnC;AACA,QAAMW,cAAc,GAAG;AAAED,IAAAA;AAAF,GAAvB;AAEA,SAAOpB,KAAK,CAACsB,QAAN,CAAeC,GAAf,CAAmBf,QAAnB,EAA6BgB,KAAK,iBACvCxB,KAAK,CAACyB,YAAN,CAAmBD,KAAnB,EAA0B;AACxBE,IAAAA,YAAY,EAAEjB,GADU;AAExBkB,IAAAA,KAAK,EAAEN;AAFiB,GAA1B,CADK,CAAP;AAMD,CAjCoB;AAAA,UAGmBlB,OAHnB,EAYKC,OAZL;AAAA,GAArB;MAAMC,Q;AAmCN,eAAeA,QAAf","sourcesContent":["import React, { memo, useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\n\nconst DragItem = memo(({ id, onMoveItem, children }) => {\n  const ref = useRef(null);\n\n  const [{ isDragging }, connectDrag] = useDrag({\n    item: { id, type: \"IMG\" },\n    collect: monitor => {\n      return {\n        isDragging: monitor.isDragging()\n      };\n    }\n  });\n\n  const [, connectDrop] = useDrop({\n    accept: \"IMG\",\n    hover(hoveredOverItem) {\n      if (hoveredOverItem.id !== id) {\n        onMoveItem(hoveredOverItem.id, id);\n      }\n    }\n  });\n\n  connectDrag(ref);\n  connectDrop(ref);\n\n  const opacity = isDragging ? 0.5 : 1;\n  const containerStyle = { opacity };\n\n  return React.Children.map(children, child =>\n    React.cloneElement(child, {\n      forwardedRef: ref,\n      style: containerStyle\n    })\n  );\n});\n\nexport default DragItem;\n"]},"metadata":{},"sourceType":"module"}