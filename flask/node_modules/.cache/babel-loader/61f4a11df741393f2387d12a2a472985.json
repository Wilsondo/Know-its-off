{"ast":null,"code":"export var getToken=function getToken(setTokenFound){return messaging.getToken({vapidKey:'GENERATED_MESSAGING_KEY'}).then(function(currentToken){if(currentToken){console.log('current token for client: ',currentToken);setTokenFound(true);// Track the token -> client mapping, by sending to backend server\n// show on the UI that permission is secured\n}else{console.log('No registration token available. Request permission to generate one.');setTokenFound(false);// shows on the UI that permission is required \n}}).catch(function(err){console.log('An error occurred while retrieving token. ',err);// catch error while creating client token\n});};export var onMessageListener=function onMessageListener(){return new Promise(function(resolve){messaging.onMessage(function(payload){resolve(payload);});});};","map":{"version":3,"sources":["/mnt/e/MyReact/new_frontend/src/components/firebase.js"],"names":["getToken","setTokenFound","messaging","vapidKey","then","currentToken","console","log","catch","err","onMessageListener","Promise","resolve","onMessage","payload"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,aAAD,CAAmB,CACvC,MAAOC,CAAAA,SAAS,CAACF,QAAV,CAAmB,CAACG,QAAQ,CAAE,yBAAX,CAAnB,EAA0DC,IAA1D,CAA+D,SAACC,YAAD,CAAkB,CACtF,GAAIA,YAAJ,CAAkB,CAChBC,OAAO,CAACC,GAAR,CAAY,4BAAZ,CAA0CF,YAA1C,EACAJ,aAAa,CAAC,IAAD,CAAb,CACA;AACA;AACD,CALD,IAKO,CACLK,OAAO,CAACC,GAAR,CAAY,sEAAZ,EACAN,aAAa,CAAC,KAAD,CAAb,CACA;AACD,CACF,CAXM,EAWJO,KAXI,CAWE,SAACC,GAAD,CAAS,CAChBH,OAAO,CAACC,GAAR,CAAY,4CAAZ,CAA0DE,GAA1D,EACA;AACD,CAdM,CAAP,CAeD,CAhBI,CAkBP,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,SAC/B,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAa,CACvBV,SAAS,CAACW,SAAV,CAAoB,SAACC,OAAD,CAAa,CAC/BF,OAAO,CAACE,OAAD,CAAP,CACD,CAFD,EAGH,CAJC,CAD+B,EAA1B","sourcesContent":["export const getToken = (setTokenFound) => {\r\n    return messaging.getToken({vapidKey: 'GENERATED_MESSAGING_KEY'}).then((currentToken) => {\r\n      if (currentToken) {\r\n        console.log('current token for client: ', currentToken);\r\n        setTokenFound(true);\r\n        // Track the token -> client mapping, by sending to backend server\r\n        // show on the UI that permission is secured\r\n      } else {\r\n        console.log('No registration token available. Request permission to generate one.');\r\n        setTokenFound(false);\r\n        // shows on the UI that permission is required \r\n      }\r\n    }).catch((err) => {\r\n      console.log('An error occurred while retrieving token. ', err);\r\n      // catch error while creating client token\r\n    });\r\n  }\r\n\r\nexport const onMessageListener = () =>\r\n  new Promise((resolve) => {\r\n    messaging.onMessage((payload) => {\r\n      resolve(payload);\r\n    });\r\n});"]},"metadata":{},"sourceType":"module"}